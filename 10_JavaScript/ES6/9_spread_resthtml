<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <script>
    // 1. ... 스프레드(spread, 펼치다[펴다]) 연산자
    // 스프레드 문법을 사용하면
    // (함수호출의 경우) 0개 이상의 인수 또는(배열 리터럴의 경우)
    // 배열 또는 문자열과 같은 반복 가능 항목을 확장할 수 있습니다
    // 객체 리터럴에서는 객체의 속성을 열거하고 생성 중인 객체에 키-값 쌍을 추가합니다 -MDN설명인용
    

    // 결론: 객체의 요소를 펼친다
    // 1) 배열의 결합
    const veggie = ['tomato','cucumber','brans'];
    const meat = ['pork','beef','chchken'];

    const menu = [...veggie,'pasta',...meat];
    console.log(menu);
    // ... 스프레드 문법으로, 베지와 미트 배열의 
    // 모든 요소를 풀어서 메뉴 배열에 넣고 그 사이에 '파스타' 라는 새 항목을 추가
    
    // 2) 배열의 복사
    // 배열의 복사본을 생성할 때 매우 유용
    const newVeggie = veggie;
    // veggie 배열의 복사본을 생성한 것처럼 보이지만 ..

    newVeggie.push('peas');
    console.log(newVeggie); // 원본까지 같이 변경됨
    // 그 이유는 실제로 복사본을 만든것이 아니라, 새 배열은 단순히 이전 배열을 참조하기 때문

    // ES5에서 일반적으로 배열의 복사본을 만드는 방법
    const orginVeggie = ['tomato','cucumber','brans'];
    const copyVeggie = [].concat(orginVeggie);
    // const copyVeggie = orginVeggie.concat();
    copyVeggie.push('peas');
    console.log(copyVeggie);
    console.log(orginVeggie); //원본은 변경 안됨

    // ES6에서 스프레드 문법으로 배열의 복사본을 만드는 방법
    const copyVeggieES6 = [...orginVeggie]; // 오리진 베지의 모든 요소를 펼쳐서 넣음
    copyVeggie.push('peas') 
    console.log(copyVeggieES6);
    console.log(orginVeggie); //원본은 변경 안됨


    // 3) 함수와 스프레드 연산자
    // 인수들을 요소로 가지는 배열에 스프레드 연산자를 사용하면 함수를 쉽게 호출 가능
    function dostuff(x,y,z) {
      console.log(x+y+z);
    }
    const args = [0,1,2];

    // dostuff(args); 매개변수에 x에 args배열이 할당됨, y,z는 undefind
    dostuff(...args);

    // 다른 예
    const name = ['kiki','hyun'];

    function greet(first,last) {
      console.log(`Hello${first} ${last}`);
    }
    greet(...name) // 배열의 두 요소 값은 함수의 두 매개변수에 자동으로 할당
    console.log(greet);

    // 지정된 매개변수보다 더 많은 값을 제공하면?
    const otherName = ['KIKI','kim','kiki'];
    greet(...otherName); // 마지막 값('kiki')은 제외된다

    // (활용) 최대값 구하기
    const numbers = [23,55,21,87,56];
    const maxValue = Math.max(...numbers);
    console.log(`최대값: ${maxValue}`);

    // 4) 객체 리터럴과 스프레드 (ES2018부터 객체에도 적용됨)
    // 4-1) 객체의 복사
    const person = {
      name: 'Kiki',
      surname: 'kim',
      age: 35
    };

    const clone = {...person};
    console.log(clone);

    clone.age = 15;
    console.log(clone);
    console.log(person);


    // 4-2) 객체의 결합
    const teacher = {
      name: 'JH Kim',
      age: 35
    };

    const classInfo1 = {
      ...teacher,
      subject: 'Web Frontend'
    };

    const classInfo2 = {
      ...classInfo1,
      day: 'weekday'
    };

    console.log(classInfo1);
    console.log(classInfo2);

    // 2. ...레스트(rest,나머지) 연산자
    // 생긴 것은 스프레드 연산자와 동일하지만 기능적으로는 정반대
    // 스프레드는 '확장(펼치다)' 하는 반먼, 레스트는 나머지 여러요소를 하나의 요소로 '압축'

    // 1) 배열과 레스트
    const runners = ['Kim', 'Lee' ,'Park', 'Choi'];
    const [first,second, ...losers] = runners; // 레스트 연산자로 압축

    console.log(losers);
    console.log(...losers); // 스프레드 연산자로 쓰임

    // 2) 함수의 레스트 파라미터
    function sum(...args) {
      let sum = 0;
      for (const arg of args) sum += arg;
      return sum;
    }
    console.log(`합계: ${sum(4,5,16,25,100)}`);


    // 3) 객체 리터럴과 레스트 (ES2018부터 객체에도 적용됨)
    const myObj = {
      a:1,
      b:3,
      c:5,
      d:7,
      e:9,
    };

    // 레스트 연산자를 사용하여 a,b를 제외한 나머지 속성을 변수 z에 할당
    const {a,b,...z} = myObj;
    console.log(a);
    console.log(b);
    console.log(z);


    // Q. 
    // 4 , 













  </script>
</head>
<body>
  
</body>
</html>